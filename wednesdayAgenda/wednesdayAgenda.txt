🧭 Workshop – Onsdag v.17
📆 Datum: 2025-04-23
🕘 Tid: 09.00–12.00
📍 Plats: Ordinarie schema
🎯 Tema: Async/Await, Promises och API-anrop från frontend mot SwaggerHub

-----------------------------
✨ Syfte

Att förstå och använda asynkrona operationer i frontend (JavaScript eller React) för att kommunicera med ett backend-API (t.ex. från SwaggerHub mock server). Fokus ligger på fetch(), Promise och async/await i praktiken.

-----------------------------
🎯 Lärandemål

K6: Beskriva hur asynkron programmering används för att hantera API-förfrågningar och databasanrop.

F4: Utföra asynkrona operationer för att hantera API-förfrågningar.

-----------------------------
🧠 Agenda

09.00–09.15	🎓 Intro & Mål – Vad är async/await & varför använder vi det?
09.15–09.45	📊 PowerPoint: async/await vs. then(), SwaggerHub, mockserver
09.45–10.30	💻 Code-Along: Göra API-anrop från frontend mot mockad SwaggerHub-backend
10.30–11.30	🧩 Självständiga övningar i tre nivåer (se nedan)
11.30–12.00	🔁 Gruppdiskussion + Reflektion: Vad funkade? Vad krånglade? Demo?

-----------------------------
📚 PowerPoint & Talarmanus:

Slide 1: Vad är asynkron programmering?

"Kod som väntar på något – t.ex. ett API-svar – men resten av programmet fortsätter."

🗣️ "Vi använder async/await och Promises för att kunna jobba med t.ex. API-anrop utan att vår sida fryser. Idag kommer vi se hur man gör detta i praktiken, mot ett riktigt API från SwaggerHub."

-----------------------------
Slide 2: SwaggerHub + Mockserver

Mockad URL används för att testa API:er utan backend.

🗣️ "Ni har redan skapat ett API i SwaggerHub – idag ska vi använda mockservern från den plattformen för att träna async-anrop från frontend."

-----------------------------
Slide 3: Kodjämförelse – fetch med then() vs async/await

// Promises
fetch(url)
  .then(res => res.json())
  .then(data => console.log(data));

// Async/await
async function getData() {
  try {
    const res = await fetch(url);
    const data = await res.json();
    console.log(data);
  } catch (err) {
    console.error("Något gick fel", err);
  }
}

-----------------------------
-----------------------------
-----------------------------
💻 Code-Along: Enkel frontend som anropar mock-API

📝 Projektstruktur:
async-workshop/
├── index.html
└── script.js


-----------------------------
🔧 1. Skapa script.js

Genomför den koden

-----------------------------
🔧 2. Skapa index.html

Genomför den koden

-----------------------------
🔶 1. SwaggerHub – Skapa & publicera mockserver

Gå till https://app.swaggerhub.com/apis
Eller: https://app.swaggerhub.com/apis/fjsx24-fcc/test-api/1.0.0#/

Skapa nytt API eller öppna ert tidigare.

Välj fliken "Servers" till höger – där finns:

✅ Mock Server URL

💡 Kopiera denna (den börjar med https://virtserver.swaggerhub.com/...)

Klistra in den i script.js där det står:
const url = "https://virtserver.swaggerhub.com/fjsx24-fcc/test-api/1.0.0/devices";

-----------------------------
-----------------------------
-----------------------------
🔶 Testa i Postman först

Öppna Postman

Klistra in din mockserver-URL (t.ex. https://virtserver.swaggerhub.com/fjsx24-fcc/test-api2/1.0.0/inventory)

Skicka GET-anrop och se om du får ett JSON-svar

-----------------------------
🔶 Testa frontend

Öppna index.html i webbläsaren

Klicka på "Hämta data"

Se om samma datan dyker upp i <pre>-elementet

-----------------------------
-----------------------------
-----------------------------
Dags för övningar

-----------------------------
-----------------------------
-----------------------------
🔁 Gruppdiskussion 

Hur RESTful var vårt API?

Fick ni svar som ni förväntade er?

Vad var det svåraste med async/await?

Kändes SwaggerHub användbart?

Fick ni igång SwaggerHub-mocken?