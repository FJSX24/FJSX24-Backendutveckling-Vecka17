🚀 Lektion: Felhantering och validering i Express + MVC + Struktur

💡 Lektionsmål
Efter lektionen ska studenterna:

Förstå grunderna i felhantering i Node/Express.

Kunna använda try/catch, next() och Express error-handling middleware.

Implementera datavalidering med biblioteket Joi.

Förstå MVC-strukturen(Youtube video om MVC) och mappstruktur i Express-applikationer. 

Kunna resonera kring skillnaden mellan MVC och headless.

Reflektera kring hur olika delar av backendutveckling hänger ihop.

------------------------------------------------------------
📝 Lektionsplanering (3 timmar)

✅ PowerPoint: Felhantering, Joi, Middleware, MVC, Struktur, Headless
✅ Code-Along - Joi & errorHandler (kommenterad kod)
✅ Visa MVC-struktur + walkthrough av mappstruktur
🧠 Diskussion: Hur hänger allt ihop?
✅ Självständig övning + Q&A

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------

📊 PowerPoint Slides & Talarmanus

Slide 1: Felsökning
🗣️ Talarmanus:
"Vi börjar med felsökning. Det första steget när något inte fungerar är att isolera problemet. Använder ni Postman eller Insomnia? Om inte, gör det. Skapa en middleware som loggar varje request – det är guld värt när ni jagar buggar. Lägg console.log() i routes, se om det triggas. Använd try/catch för att förhindra att servern kraschar vid fel."

-------------------------------------------------
Slide 2: Validering
🗣️ Talarmanus:
"Validering innebär att vi kontrollerar den inkommande datan – stämmer format, finns alla fält med? Utan validering kan användare eller buggar förstöra våra datamodeller eller orsaka oväntade fel. Validering skyddar både vår server och användarens upplevelse."

-------------------------------------------------
Slide 3: Autentisering
🗣️ Talarmanus:
"Autentisering är en typ av validering – men på användarnivå. Vi kontrollerar om användaren är den hen utger sig för att vara. Det görs vanligtvis via JWT eller sessions, men innan det sker måste vi validera användarens inloggningsdata."

-------------------------------------------------
Slide 4: Joi
🗣️ Talarmanus:
"Joi är ett bibliotek som hjälper oss med validering i Node.js. Vi definierar ett schema som anger regler för hur datan ska se ut, och sedan validerar vi inkommande data mot det. Om något är fel får vi ett tydligt felobjekt. Vi använder Joi i routes innan vi skapar eller uppdaterar data."

-------------------------------------------------
📊 PowerPoint Slides & Talarmanus (komplettering)

Slide 5: Middleware - repetition
🗣️ "Middleware fungerar som ett filter för inkommande requests. Vi kan använda dem för logging, validering, autentisering eller felhantering. De körs i ordning. Använd app.use() för att koppla på middleware."

-------------------------------------------------
Slide 6: MVC – Model View Controller
🗣️ "MVC står för Model-View-Controller, en designprincip som hjälper oss att separera ansvar i vår applikation. I backendkontext med Express jobbar vi oftast med en modifierad version:

Model – Hanterar datalagring, t.ex. en databasmodell (ex. Mongoose eller en mock).

Controller – Innehåller själva logiken, alltså det som händer när en request tas emot.

Routes – Tar emot requests från klienten och dirigerar dem till rätt controller.

Denna separation gör det lättare att:
Hålla koden testbar
Återanvända logik
Arbeta i team parallellt utan att krocka

-------------------------------------------------
Slide 7: Struktur i backendprojekt
🗣️ "En typisk struktur i Express kan se ut så här:
├── controllers/
├── models/
├── routes/
├── middlewares/
├── validators/
├── index.js

Vi undviker att lägga all logik i routes – vi bryter ut till controllers och validerar med middleware."

-------------------------------------------------
Slide 8: MVC vs Headless
🗣️ "MVC bygger ofta hela appen, inklusive HTML-rendering, t.ex. med EJS eller Pug. I ett headless-upplägg bygger vi bara API:et – klienten hämtar data och ansvarar för gränssnittet (SPA, mobilapp osv). Headless gör det enkelt att återanvända samma backend till flera typer av klienter.(webb, mobil, etc).

-------------------------------------------------
OBS SE VIDEO OM MVC INNAN DENNA:

Slide 9: Hur allt hänger ihop
🗣️ "Vi har lärt oss följande komponenter i backend:

Node.js – Själva plattformen vi kör vår kod i

Express – Vårt ramverk som förenklar HTTP-server och routing

Middleware – Funktioner som exekveras innan din route-logik körs

Routing – Här bestäms vilken controller som ska svara på vilken endpoint

API – Vår definierade uppsättning endpoints

Validering – Säkerställer att inkommande data är korrekt

Felhantering – Samlar fel på ett strukturerat sätt, visar tydliga felmeddelanden

MVC – Vår kodstruktur som gör det hela läsbart, testbart och skalbart

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
💻 Code-Along – Joi & Felhantering

🗣️ Code-Along Start:
"Hej alla! Nu ska vi först validera inkommande data med Joi, och därefter skapa en global error handler för att fånga och hantera fel på ett strukturerat sätt."

-------------------------------------------------
🏗️ Projektstruktur:

├── index.js
├── routes/
│   └── users.js
├── middlewares/
│   └── errorHandler.js
├── validators/
│   └── userSchema.js
├── package.json

-------------------------------------------------
🔧 1. Installera nödvändiga paket

npm init -y
npm install express joi

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
📝 Skapa huvudfilen: index.js

Genomför den koden.

-------------------------------------------------
📝 Skapa routes/users.js

Genomför den koden.

-------------------------------------------------
📝 4. Skapa validators/userSchema.js

Genomför den koden.

-------------------------------------------------
📝 5. Skapa middlewares/errorHandler.js

Genomför den koden.

-------------------------------------------------

🔍 Testa API:t live i Postman

Starta servern:
node index.js

-------------------------------------------------
Skicka ett korrekt anrop:

POST till http://localhost:3000/users

Body (JSON):
{
  "name": "Mandus",
  "email": "mandus@folkan.se",
  "age": 80
}

✅ Ska returnera: 201 Created

-------------------------------------------------
Skicka ett felaktigt anrop (utan e-post):

{
  "name": "Mandus",
  "age": 35
}

❌ Returnerar 400 + felmeddelande om att e-post saknas

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
🧠 Reflektionsfrågor till diskussion

Vad är skillnaden mellan routing och controller?

Varför är middleware så viktigt i Express?

Vad vinner vi på att använda MVC?

Hur påverkar filstruktur möjligheten att växa som team?

Var skulle du lägga logiken för att skapa en användare?

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
🗣️ Sammanfattning
"Vi har idag lärt oss inte bara tekniker som Joi och error middleware, utan också strukturer som gör vårt API hållbart och skalbart. Ni har nu byggstenarna för att skapa professionella backendlösningar – med struktur, säkerhet och förståelse för helheten. Grymt jobbat!"

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
🗣️ Självständig Övningar:
